# cloudbuild-pr.yaml - Pull request validation
steps:
  # Step 1: Comprehensive Terraform Validation
  - name: 'hashicorp/terraform:1.5.7'
    id: 'terraform-validate'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "========================================="
        echo "=== Terraform PR Validation          ==="
        echo "========================================="
        terraform version
        
        echo "=== Step 1: Syntax and Formatting Check ==="
        echo "Checking terraform formatting..."
        if ! terraform fmt -check=true -diff=true; then
          echo "❌ FAIL: Terraform files are not properly formatted"
          echo "Run 'terraform fmt' to fix formatting issues"
          exit 1
        fi
        echo "✅ PASS: Terraform formatting is correct"
        
        echo "=== Step 2: Configuration Validation ==="
        echo "Initializing terraform (without backend for validation)..."
        terraform init -backend=false
        
        echo "Validating terraform configuration..."
        if ! terraform validate; then
          echo "❌ FAIL: Terraform configuration is invalid"
          exit 1
        fi
        echo "✅ PASS: Terraform configuration is valid"
        
    env:
      - 'TF_IN_AUTOMATION=true'

  # Step 2: Terraform Plan (with backend)
  - name: 'google/cloud-sdk:latest'
    id: 'terraform-plan'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Install Terraform
        apt-get update && apt-get install -y gnupg software-properties-common curl
        curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
        apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        apt-get update && apt-get install terraform
        
        echo "=== Step 3: Terraform Plan Validation ==="
        echo "Terraform version: $(terraform version)"
        
        # Set required variables for plan
        export TF_VAR_github_token="$$SDK_GITHUB_TOKEN"
        export TF_VAR_gcp_project_id="${PROJECT_ID}"
        export TF_VAR_github_owner="${_GITHUB_OWNER}"
        export TF_VAR_github_app_id="80495728"
        export TF_VAR_sdk_automation_github_app_id="1770057"
        
        echo "Initializing terraform with backend..."
        terraform init
        
        echo "Running terraform plan..."
        if ! terraform plan -detailed-exitcode -out=pr-validation.tfplan; then
          PLAN_EXIT_CODE=$?
          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "❌ FAIL: Terraform plan failed with errors"
            exit 1
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "⚠️  INFO: Terraform plan succeeded with changes detected"
            echo "This is expected for most PRs that modify infrastructure"
          fi
        else
          echo "✅ PASS: Terraform plan succeeded with no changes"
        fi
        
        echo "=== Step 4: Plan Analysis ==="
        echo "Analyzing planned changes..."
        terraform show pr-validation.tfplan
        
        echo "=== PR validation completed successfully ==="
    env:
      - 'TF_IN_AUTOMATION=true'
      - 'TF_VAR_github_owner=${_GITHUB_OWNER}'
      - 'TF_VAR_gcp_project_id=${PROJECT_ID}'
    secretEnv: ['SDK_GITHUB_TOKEN']

# Use same substitutions and service account
substitutions:
  _GITHUB_TOKEN: 'projects/${PROJECT_ID}/secrets/sdk-github-token/versions/latest'
  _GITHUB_OWNER: 'dg-ghtest'

serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/terraform-automation@${PROJECT_ID}.iam.gserviceaccount.com'

# Available secrets
availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/sdk-github-token/versions/latest
    env: 'SDK_GITHUB_TOKEN'

options:
  logging: CLOUD_LOGGING_ONLY

# Increase timeout for plan step
timeout: '900s'