# cloudbuild-pr.yaml - Pull request validation
# This configuration runs on pull requests to validate changes without applying

steps:
  # Step 1: Validate and Plan Terraform Configuration
  - name: 'google/cloud-sdk:latest'
    id: 'terraform-validate-and-plan'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        # Install Terraform
        apt-get update && apt-get install -y gnupg software-properties-common curl
        curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
        apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        apt-get update && apt-get install terraform

        echo "Validating Terraform configuration..."
        terraform fmt -check=true -diff=true
        
        echo "Planning Terraform changes for PR review..."

        # Create backend bucket if it doesn't exist
        # The service account needs storage.buckets.create permissions for this
        if ! gsutil ls gs://dgzn-terraform-tfstate; then
          echo "Creating GCS backend bucket..."
          gsutil mb -p ${PROJECT_ID} gs://dgzn-terraform-tfstate
        else
          echo "GCS backend bucket already exists."
        fi

        # Initialize with backend
        terraform init

        # Plan the configuration
        echo "=== Planning Terraform configuration ==="
        # Use -var-file only if terraform.tfvars exists
        if [ -f terraform.tfvars ]; then
          terraform plan -var-file=terraform.tfvars
        else
          terraform plan
        fi

        echo "=== PR validation completed ==="
        echo "Review the plan above before merging to main"
    env:
      - 'TF_IN_AUTOMATION=true'
      - 'GITHUB_TOKEN=${_GITHUB_TOKEN}'
      - 'TF_VAR_github_token=${_GITHUB_TOKEN}'
      - 'TF_VAR_github_owner=${_GITHUB_OWNER}'
      - 'TF_VAR_gcp_project_id=${PROJECT_ID}'

# Use same substitutions and service account
substitutions:
  _GITHUB_TOKEN: 'projects/${PROJECT_ID}/secrets/github-token/versions/latest'
  _GITHUB_OWNER: 'dg-ghtest'

serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/terraform-automation@${PROJECT_ID}.iam.gserviceaccount.com'

options:
  machineType: 'E2_STANDARD_2'
  logging: CLOUD_LOGGING_ONLY

timeout: '600s'