name: PR Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.yaml'
      - '**.yml'

jobs:
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        
    - name: Terraform Format Check
      id: fmt
      run: |
        echo "üîç Checking Terraform formatting..."
        if ! terraform fmt -check=true -diff=true; then
          echo "‚ùå Terraform files are not properly formatted"
          echo "::error::Run 'terraform fmt' to fix formatting issues"
          exit 1
        fi
        echo "‚úÖ Terraform formatting is correct"
        
    - name: Terraform Init
      id: init
      run: |
        echo "üöÄ Initializing Terraform..."
        terraform init -backend=false
        
    - name: Terraform Validate
      id: validate
      run: |
        echo "üîç Validating Terraform configuration..."
        if ! terraform validate; then
          echo "‚ùå Terraform configuration is invalid"
          echo "::error::Terraform configuration validation failed"
          exit 1
        fi
        echo "‚úÖ Terraform configuration is valid"
        
    - name: Security Scan
      id: security
      run: |
        echo "üîí Running security checks..."
        
        # Check for common security issues (excluding example patterns)
        echo "Checking for exposed secrets..."
        if grep -r "ghp_[A-Za-z0-9]\{36\}" . --exclude-dir=.git --exclude="*.md" --exclude="*.sh" --exclude="*.yml" --exclude="*.yaml" || \
           grep -r "sk-[A-Za-z0-9]\{48\}" . --exclude-dir=.git --exclude="*.md" --exclude="*.sh" --exclude="*.yml" --exclude="*.yaml" || \
           grep -r "AKIA[A-Z0-9]\{16\}" . --exclude-dir=.git --exclude="*.md" --exclude="*.sh" --exclude="*.yml" --exclude="*.yaml"; then
          echo "‚ùå Actual secrets found in code"
          echo "::error::Remove secrets from code and use Secret Manager instead"
          exit 1
        fi
        
        # Check for hardcoded credentials
        echo "Checking for hardcoded credentials..."
        if grep -ri "password\s*=" . --include="*.tf" --include="*.tfvars" || \
           grep -ri "secret\s*=" . --include="*.tf" --include="*.tfvars" | grep -v "secret_id\|secret_manager"; then
          echo "‚ö†Ô∏è  Potential hardcoded credentials found"
          echo "::warning::Review credential usage and ensure secrets are properly managed"
        fi
        
        echo "‚úÖ Security scan completed"
        
    - name: Syntax Check
      id: syntax
      run: |
        echo "üîç Running additional syntax checks..."
        
        # Check for balanced braces
        echo "Checking brace balance..."
        for file in *.tf; do
          if [ -f "$file" ]; then
            open_braces=$(grep -o '{' "$file" | wc -l)
            close_braces=$(grep -o '}' "$file" | wc -l)
            if [ "$open_braces" -ne "$close_braces" ]; then
              echo "‚ùå Unbalanced braces in $file: $open_braces opening, $close_braces closing"
              echo "::error::Fix brace balance in $file"
              exit 1
            fi
          fi
        done
        
        # Check for common syntax issues
        echo "Checking for common syntax issues..."
        if grep -n "resource.*{$" *.tf | grep -v ".*{$"; then
          echo "‚ö†Ô∏è  Potential syntax issues found"
        fi
        
        echo "‚úÖ Syntax checks passed"
        
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `
          ## üîç Terraform PR Validation Results
          
          | Check | Status |
          |-------|--------|
          | Format | ‚úÖ Passed |
          | Validation | ‚úÖ Passed |
          | Security | ‚úÖ Passed |
          | Syntax | ‚úÖ Passed |
          
          **Note**: This validation runs independently of Cloud Build to catch issues early.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })